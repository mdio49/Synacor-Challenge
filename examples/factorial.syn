# Example of a factorial function using recursion (only works modulo 32768).

main:
    # Ask the user for a number.
    set $0 0
    out "Please enter a number: "

read_input:
    in $1               # Read a character.
    eq $2 $1 '\n'
    jt $2 @done_reading # Stop once we reach a new-line character.

    add $1 $1 -48       # 48 is the ASCII code for '0'.
    gt $2 $1 9
    jt $2 @not_a_number # Halt if the character read is not a digit.

    mult $0 $0 10
    add $0 $0 $1
    jmp @read_input

not_a_number:
    out "Not a number!\n"
    halt

done_reading:
    call @itoa
    out "! = "
    call @fact
    call @itoa
    out " (mod 32768)\n"
    halt

# Computes the factorial of $0 (mod 32768) and stores it in $0.
fact:
    push $1
    call @fact_rec
    pop $1
    ret

fact_rec:
    jf $0 @fact_end     # Jump if $0 == 0.
    push $0             # Push $0 to the stack.
    add $0 $0 -1        # Subtract 1 from $0.
    call @fact_rec      # Call 'fact_rec' recursively.
    pop $1              # Pop what $0 was back from the stack and store it in $1.
    mult $0 $0 $1       # Multiply $0 and $1 and store it in $0.
    ret                 # Return.

fact_end:
    set $0 1            # 0! = 1.
    ret                 # Return.

# Prints the string representation of the number stored in $0.
itoa:
    push $0
    push $1
    push 0

itoa_loop:
    mod $1 $0 10
    add $1 $1 '0'
    push $1
    set $1 10
    call @div
    jf $0 @itoa_print
    jmp @itoa_loop

itoa_print:
    pop $0
    jf $0 @itoa_end
    out $0
    jmp @itoa_print

itoa_end:
    pop $1
    pop $0
    ret

# Computes $0 / $1 and stores it in $0
div:
    push $1
    push $2
    push $3
    push $4
    eq $3 $1 0
    jt $3 @div_by_zero
    set $2 0

div_loop:
    gt $3 $0 $1
    eq $4 $0 $1
    or $3 $3 $4
    jf $3 @div_end

    add $2 $2 1
    set $3 $1
    mult $3 $3 -1
    add $0 $0 $3
    jmp @div_loop

div_by_zero:
    out "Error: Division by zero!\n"
    halt

div_end:
    set $0 $2
    pop $4
    pop $3
    pop $2
    pop $1
    ret
